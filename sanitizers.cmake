# Various sanitizers (runtime checks) for debugging
# Use options (e.g. -DASAN=ON) for your *entire* project
# AddressSanitizer also checks for stack abuse and leaks, but StackProtector and LeakSanitizer have less overhead.
# Mutually compatible sanitizers: SSP, UBSAN, LSAN, ASAN
# TSAN is incompatible with UBSAN, LSAN, ASAN
option(CXXWARN "Compiler warnings" OFF)
option(HARDENED "Enable flags which improve security without affecting ABI" OFF)
option(SSP "Stack Smashing Protector (GCC/Clang/AppleClang/MSVC)" OFF)
option(UBSAN "Undefined Behavior Sanitizer (GCC/Clang/AppleClang on Unix)" OFF)
option(LSAN "Leak Sanitizer (GCC/Clang/AppleClang on Unix)" OFF)
option(ASAN "Address Sanitizer (GCC/Clang/AppleClang on Unix, MSVC on Windows)" OFF)
option(MSAN "Memory (initialization) Sanitizer (Clang/AppleClang on Unix)" OFF)
option(TSAN "Thread Sanitizer (GCC/Clang/AppleClang on Unix)" OFF)
option(RTC_C "Runtime Checks for Conversions (MSVC on Windows)" OFF)
option(RTC_S "Runtime Checks for Stack (MSVC on Windows)" OFF)
option(RTC_U "Runtime Checks for Uninitialized (MSVC on Windows)" OFF)

if (CXXWARN)
  if (CMAKE_CXX_COMPILER_ID MATCHES GNU)
    add_compile_options(-Wpedantic -Wall -Wextra)
  elseif (CMAKE_CXX_COMPILER_ID MATCHES Clang)
    add_compile_options(-Wpedantic -Wall -Wextra)
  elseif (CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    add_compile_options(/Wall)
  else()
    message(WARNING "Failed to turn on compiler warnings for ${CMAKE_CXX_COMPILER_ID}")
  endif ()
endif (CXXWARN)

if(SSP)
  add_compile_options(-Wstack-protector -fstack-protector-strong -fstack-clash-protection)
  add_link_options(-fstack-protector-strong -fstack-clash-protection)
  message(STATUS "Enabled Stack Smashing Protector")
else(SSP)
  message(STATUS "Disabled Stack Smashing Protector")
endif(SSP)

if (HARDENED)
  if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 14)
      # See `g++ --help=hardened`
      add_compile_options(-Whardened -fhardened)
      add_link_options(-Whardened -fhardened)
    else ()
      add_compile_definitions(_FORTIFY_SOURCE=3 _GLIBCXX_ASSERTIONS)
      add_compile_options(-fvisibility=hidden -ftrivial-auto-var-init=zero -fstack-protector-strong -fstack-clash-protection -fcf-protection=full)
      add_link_options(-ftrivial-auto-var-init=zero -fstack-protector-strong -fstack-clash-protection -fcf-protection=full -Wl,-z,relro,-z,now)
    endif ()
    message(STATUS "Enabled Hardened Security")
  elseif (CMAKE_CXX_COMPILER_ID MATCHES Clang)
    # See https://clang.llvm.org/docs/SafeStack.html
    # Also https://best.openssf.org/Compiler-Hardening-Guides/Compiler-Options-Hardening-Guide-for-C-and-C++.html
    # -fsanitize=cfi depends on libclang-rt-19-dev being installed
    add_compile_definitions(_FORTIFY_SOURCE=3 _GLIBCXX_ASSERTIONS)
    add_compile_options(-fvisibility=hidden -fstack-protector-strong -fcf-protection=full -fstack-clash-protection -fsanitize=safe-stack)
    add_link_options(-fstack-protector-strong -fstack-clash-protection -fcf-protection=full -fsanitize=safe-stack -Wl,-z,relro,-z,now)
    # -flto -fsanitize=cfi # breaks in several weird ways
    # See https://libcxx.llvm.org/Hardening.html
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
      add_compile_definitions(_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG)
    else ()
      add_compile_definitions(_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST)
    endif ()
    message(STATUS "Enabled Hardened Security")
  elseif (CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    add_compile_options(/analyse /sdl /GS /guard:cf)
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
      add_compile_definitions(_ALLOW_RTCc_IN_STL)
      add_compile_options(/RTCc /RTCs /RTCu)  # incompatible with /O2
    endif ()
    message(STATUS "Enabled Hardened Security")
  else ()
    message(WARNING "Failed to Harden Security for ${CMAKE_CXX_COMPILER_ID}")
  endif ()
else (HARDENED)
  message(STATUS "Disabled Hardened Security")
endif (HARDENED)

if(UBSAN)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/fsanitize=undefined)
    message(STATUS "See MSVC sanitizers: https://learn.microsoft.com/en-us/cpp/sanitizers")
    message(STATUS "Consider RTC_C, RTC_S, RTS_U instead")
  else()
    add_compile_options(-fsanitize=undefined)
    add_link_options(-fsanitize=undefined)
  endif()
  message(STATUS "Enabled Undefined Behavior Sanitizer")
else(UBSAN)
  message(STATUS "Disabled Undefined Behavior Sanitizer")
endif(UBSAN)

if(LSAN)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/fsanitize=leak)
    message(STATUS "See MSVC sanitizers: https://learn.microsoft.com/en-us/cpp/sanitizers")
    message(STATUS "Consider ASAN instead")
  else()
    add_compile_options(-fsanitize=leak)
    add_link_options(-fsanitize=leak)
  endif()
  message(STATUS "Enabled Leak Sanitizer")
else(LSAN)
  message(STATUS "Disabled Leak Sanitizer")
endif(LSAN)

if(ASAN)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/fsanitize=address)
  else()
    add_compile_options(-fsanitize=address)
    add_link_options(-fsanitize=address)
  endif()
  message(STATUS "Enabled Address Sanitizer")
else(ASAN)
  message(STATUS "Disabled Address Sanitizer")
endif(ASAN)

if(MSAN)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/fsanitize=memory)
  else()
    add_compile_options(-fsanitize=memory)
    add_link_options(-fsanitize=memory)
  endif()
  message(STATUS "Enabled Memory Sanitizer")
else(MSAN)
  message(STATUS "Disabled Memory Sanitizer")
endif(MSAN)

if(TSAN)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/fsanitize=thread)
    message(STATUS "See MSVC sanitizers: https://learn.microsoft.com/en-us/cpp/sanitizers")
  else()
    add_compile_options(-fsanitize=thread)
    add_link_options(-fsanitize=thread)
  endif()
  message(STATUS "Enabled Thread Sanitizer")
else(TSAN)
  message(STATUS "Disabled Thread Sanitizer")
endif(TSAN)

if(UBSAN OR LSAN OR ASAN OR MSAN OR TSAN)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  else()
    add_compile_options(-fno-omit-frame-pointer)
    add_link_options(-fno-omit-frame-pointer)
  endif()
endif()

if(RTC_C)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/RTCc)
    add_compile_definitions(_ALLOW_RTCc_IN_STL)
    message(STATUS "Enabled Runtime Check Conversions")
  else()
    message(WARNING "Runtime Check Conversions are not enabled for ${CMAKE_CXX_COMPILER_ID}")
  endif()
endif(RTC_C)

if(RTC_S)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/RTCs)
    message(STATUS "Enabled Runtime Check Stack")
  else()
    message(WARNING "Runtime Check Stack is not enabled for ${CMAKE_CXX_COMPILER_ID}")
  endif()
endif(RTC_S)

if(RTC_U)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/RTCu)
    message(STATUS "Enabled Runtime Check Uninitialized")
  else()
    message(WARNING "Runtime Check Uninitialized is not enabled for ${CMAKE_CXX_COMPILER_ID}")
  endif()
endif(RTC_U)
